#   cleanboi=substr(extractboi, 1,2)
# }
# else if(nchar(extractboi)==6){
#   cleanboi=substr(extractboi, 1,3)
# }
# else if(nchar(extractboi) == 3){
#   cleanboi=extractboi
# }
#
# cleanboi
}
full_time <- df %>% filter(workType == "Full Time") %>%
filter(salary_string != '') %>%
filter(grepl("\\d", salary_string)) %>%
separate(salary_string, c('min','max') ,'-') %>%
rowwise() %>%
mutate(`min_cleaned` = getMoney(min)) %>%
mutate(`max_cleaned` = getMoney(max)) %>%
select(19,20,54,55)
full_time
#get only salary string with numerical data
#if only one number, max/min = that one number
#if two numbers, min is lower max is higher
getMoney <- function(str1, str2) {
extractboi1 <- str_extract(str1,"\\d+")
extractboi2 <- str_extract(str2,"\\d+")
myextract = ''
#check the first string, if its empyty then use the second
if(is.na(extractboi1)){
myextract=extractboi2
}
else{
myextract=extractboi1
}
cleanboi = 'HIE'
if(nchar(myextract) == 5){
cleanboi=substr(myextract, 1,2)
}
else if(nchar(myextract)==6){
cleanboi=substr(myextract, 1,3)
}
else if(nchar(myextract) == 3 || nchar(myextract == 2)){
cleanboi=myextract
}
cleanboi
}
full_time <- df %>% filter(workType == "Full Time") %>%
filter(salary_string != '') %>%
filter(grepl("\\d", salary_string)) %>%
separate(salary_string, c('min','max') ,'-') %>%
rowwise() %>%
mutate(`min_cleaned` = getMoney(min)) %>%
mutate(`max_cleaned` = getMoney(max)) %>%
select(19,20,54,55)
getMoney <- function(str1, str2) {
extractboi1 <- str_extract(str1,"\\d+")
extractboi2 <- str_extract(str2,"\\d+")
myextract = ''
#check the first string, if its empyty then use the second
if(is.na(extractboi1)){
myextract=extractboi2
}
else{
myextract=extractboi1
}
cleanboi = 'HIE'
if(nchar(myextract) == 5){
cleanboi=substr(myextract, 1,2)
}
else if(nchar(myextract)==6){
cleanboi=substr(myextract, 1,3)
}
else if(nchar(myextract) == 3 || nchar(myextract == 2)){
cleanboi=myextract
}
cleanboi
}
full_time <- df %>% filter(workType == "Full Time") %>%
filter(salary_string != '') %>%
filter(grepl("\\d", salary_string)) %>%
separate(salary_string, c('min','max') ,'-') %>%
rowwise() %>%
mutate(`min_cleaned` = getMoney(min, max)) %>%
mutate(`max_cleaned` = getMoney(max, min)) %>%
select(19,20,54,55)
full_time
#get only salary string with numerical data
#if only one number, max/min = that one number
#if two numbers, min is lower max is higher
getMoney <- function(str1, str2) {
extractboi1 <- str_extract(str1,"\\d+")
extractboi2 <- str_extract(str2,"\\d+")
myextract = ''
#check the first string, if its empyty then use the second
if(is.na(extractboi1)){
myextract=extractboi2
}
else{
myextract=extractboi1
}
cleanboi = 'HIE'
if(nchar(myextract) == 5){
cleanboi=substr(myextract, 1,2)
}
else if(nchar(myextract) >= 6){
cleanboi=substr(myextract, 1,3)
}
else if(nchar(myextract) == 3 || nchar(myextract == 2)){
cleanboi=myextract
}
cleanboi
}
full_time <- df %>% filter(workType == "Full Time") %>%
filter(salary_string != '') %>%
filter(grepl("\\d", salary_string)) %>%
separate(salary_string, c('min','max') ,'-') %>%
rowwise() %>%
mutate(`min_cleaned` = getMoney(min, max)) %>%
mutate(`max_cleaned` = getMoney(max, min)) %>%
select(19,20,54,55)
full_time
#get only salary string with numerical data
#if only one number, max/min = that one number
#if two numbers, min is lower max is higher
getMoney <- function(str1, str2) {
extractboi1 <- str_extract(str1,"\\d+")
extractboi2 <- str_extract(str2,"\\d+")
myextract = ''
#check the first string, if its empyty then use the second
if(is.na(extractboi1)){
myextract=extractboi2
}
else{
myextract=extractboi1
}
cleanboi = 'HIE'
if(nchar(myextract) == 5){
cleanboi=substr(myextract, 1,2)
}
else if(nchar(myextract) >= 6){
cleanboi=substr(myextract, 1,3)
}
else if(nchar(myextract) == 3 || nchar(myextract == 2)){
cleanboi=myextract
}
as.integer(cleanboi)
}
full_time <- df %>% filter(workType == "Full Time") %>%
filter(salary_string != '') %>%
filter(grepl("\\d", salary_string)) %>%
separate(salary_string, c('min','max') ,'-') %>%
rowwise() %>%
mutate(`min_cleaned` = getMoney(min, max)) %>%
mutate(`max_cleaned` = getMoney(max, min)) %>%
filter(min_cleaned >= 50 && max_cleaned >= 50) %>%
select(19,20,54,55)
full_time
#get only salary string with numerical data
#if only one number, max/min = that one number
#if two numbers, min is lower max is higher
getMoney <- function(str1, str2) {
extractboi1 <- str_extract(str1,"\\d+")
extractboi2 <- str_extract(str2,"\\d+")
myextract = ''
#check the first string, if its empyty then use the second
if(is.na(extractboi1)){
myextract=extractboi2
}
else{
myextract=extractboi1
}
cleanboi = 'HIE'
if(nchar(myextract) == 5){
cleanboi=substr(myextract, 1,2)
}
else if(nchar(myextract) >= 6){
cleanboi=substr(myextract, 1,3)
}
else if(nchar(myextract) == 3 || nchar(myextract == 2)){
cleanboi=myextract
}
as.integer(cleanboi)
}
full_time <- df %>% filter(workType == "Full Time") %>%
filter(salary_string != '') %>%
filter(grepl("\\d", salary_string)) %>%
separate(salary_string, c('min','max') ,'-') %>%
rowwise() %>%
mutate(`min_cleaned` = getMoney(min, max)) %>%
mutate(`max_cleaned` = getMoney(max, min)) %>%
filter(min_cleaned >= 50 && max_cleaned >= 50) %>%
full_time
getMoney <- function(str1, str2) {
extractboi1 <- str_extract(str1,"\\d+")
extractboi2 <- str_extract(str2,"\\d+")
myextract = ''
#check the first string, if its empyty then use the second
if(is.na(extractboi1)){
myextract=extractboi2
}
else{
myextract=extractboi1
}
cleanboi = 'HIE'
if(nchar(myextract) == 5){
cleanboi=substr(myextract, 1,2)
}
else if(nchar(myextract) >= 6){
cleanboi=substr(myextract, 1,3)
}
else if(nchar(myextract) == 3 || nchar(myextract == 2)){
cleanboi=myextract
}
as.integer(cleanboi)
}
full_time <- df %>% filter(workType == "Full Time") %>%
filter(salary_string != '') %>%
filter(grepl("\\d", salary_string)) %>%
separate(salary_string, c('min','max') ,'-') %>%
rowwise() %>%
mutate(`min_cleaned` = getMoney(min, max)) %>%
mutate(`max_cleaned` = getMoney(max, min)) %>%
filter(min_cleaned >= 50 && max_cleaned >= 50)
full_time
#get only salary string with numerical data
#if only one number, max/min = that one number
#if two numbers, min is lower max is higher
dbWriteTable(con, "australia_rectified", fullt_time)
dbWriteTable(con, "australia_rectified", full_time)
#DB Set up
con <- dbConnect(RMariaDB::MariaDB(), username="ahmed", password="buckets123!@#", dbname ="basic", host="localhost")
dbListTables(con)
dbWriteTable(con, "australia_rectified", full_time)
knitr::opts_chunk$set(echo = TRUE, class.source = "codechunk")
library(janeaustenr)
library(stringr)
knitr::opts_chunk$set(echo = TRUE, class.source = "codechunk")
library(janeaustenr)
library(dplyr)
library(stringr)
tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(
linenumber = row_number(),
chapter = cumsum(str_detect(text,
regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
knitr::opts_chunk$set(echo = TRUE, class.source = "codechunk")
library(janeaustenr)
library(dplyr)
library(stringr)
tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(
linenumber = row_number(),
chapter = cumsum(str_detect(text,
regex("^chapter [\\divxlc]",
ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(
linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]", ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
knitr::opts_chunk$set(echo = TRUE, class.source = "codechunk")
library(janeaustenr)
library(dplyr)
library(stringr)
library(tidytext)
tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(
linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]", ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
tidy_books <- austen_books() %>%
group_by(book) %>%
mutate(
linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]", ignore_case = TRUE)))) %>%
ungroup() %>%
unnest_tokens(word, text)
tidy_books
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
get_sentiments("nrc")
knitr::opts_chunk$set(echo = TRUE, class.source = "codechunk")
library(janeaustenr)
library(dplyr)
library(stringr)
library(tidytext)
knitr::opts_chunk$set(echo = TRUE, class.source = "codechunk")
library(janeaustenr)
library(dplyr)
library(stringr)
library(tidytext)
library(textdata)
install.packages("textdata")
knitr::opts_chunk$set(echo = TRUE, class.source = "codechunk")
library(janeaustenr)
library(dplyr)
library(stringr)
library(tidytext)
library(textdata)
get_sentiments("nrc")
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
nrc_joy <- get_sentiments("nrc") %>%
filter(sentiment == "joy")
tidy_books %>%
filter(book == "Emma") %>%
inner_join(nrc_joy) %>%
count(word, sort = TRUE)
knitr::opts_chunk$set(echo = TRUE, class.source = "codechunk")
library(janeaustenr)
library(dplyr)
library(stringr)
library(tidytext)
library(textdata)
library(tidyr)
jane_austen_sentiment <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = linenumber %/% 80, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
jane_austen_sentiment <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(book, index = linenumber %/% 80, sentiment) %>%
pivot_wider(names_from = sentiment, values_from = n, values_fill = 0) %>%
mutate(sentiment = positive - negative)
jane_austen_sentiment
ggplot(jane_austen_sentiment, aes(index, sentiment, fill = book)) +
geom_col(show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = "free_x")
knitr::opts_chunk$set(echo = TRUE, class.source = "codechunk")
library(janeaustenr)
library(dplyr)
library(stringr)
library(tidytext)
library(textdata)
library(tidyr)
library(ggplot2)
ggplot(jane_austen_sentiment, aes(index, sentiment, fill = book)) +
geom_col(show.legend = FALSE) +
facet_wrap(~book, ncol = 2, scales = "free_x")
afinn <- pride_prejudice %>%
inner_join(get_sentiments("afinn")) %>%
group_by(index = linenumber %/% 80) %>%
summarise(sentiment = sum(value)) %>%
mutate(method = "AFINN")
pride_prejudice <- tidy_books %>%
filter(book == "Pride & Prejudice")
afinn <- pride_prejudice %>%
inner_join(get_sentiments("afinn")) %>%
group_by(index = linenumber %/% 80) %>%
summarise(sentiment = sum(value)) %>%
mutate(method = "AFINN")
bing_and_nrc <- bind_rows(
pride_prejudice %>%
inner_join(get_sentiments("bing")) %>%
mutate(method = "Bing et al."),
pride_prejudice %>%
inner_join(get_sentiments("nrc") %>%
filter(sentiment %in% c("positive",
"negative"))
) %>%
mutate(method = "NRC")) %>%
count(method, index = linenumber %/% 80, sentiment) %>%
pivot_wider(names_from = sentiment,
values_from = n,
values_fill = 0) %>%
mutate(sentiment = positive - negative)
bind_rows(afinn,
bing_and_nrc) %>%
ggplot(aes(index, sentiment, fill = method)) +
geom_col(show.legend = FALSE) +
facet_wrap(~method, ncol = 1, scales = "free_y")
bing_word_counts <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
bing_word_counts <- tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
ungroup()
bing_word_counts %>%
group_by(sentiment) %>%
slice_max(n, n = 10) %>%
ungroup() %>%
mutate(word = reorder(word, n)) %>%
ggplot(aes(n, word, fill = sentiment)) +
geom_col(show.legend = FALSE) +
facet_wrap(~sentiment, scales = "free_y") +
labs(x = "Contribution to sentiment",
y = NULL)
custom_stop_words <- bind_rows(tibble(word = c("miss"),
lexicon = c("custom")),
stop_words)
custom_stop_words <- bind_rows(tibble(word = c("miss"),
lexicon = c("custom")),
stop_words)
custom_stop_words
knitr::opts_chunk$set(echo = TRUE, class.source = "codechunk")
library(janeaustenr)
library(dplyr)
library(stringr)
library(tidytext)
library(textdata)
library(tidyr)
library(ggplot2)
library(wordcloud)
tidy_books %>%
anti_join(stop_words) %>%
count(word) %>%
with(wordcloud(word, n, max.words = 100))
knitr::opts_chunk$set(echo = TRUE, class.source = "codechunk")
library(janeaustenr)
library(dplyr)
library(stringr)
library(tidytext)
library(textdata)
library(tidyr)
library(ggplot2)
library(wordcloud)
library(reshape2)
tidy_books %>%
inner_join(get_sentiments("bing")) %>%
count(word, sentiment, sort = TRUE) %>%
acast(word ~ sentiment, value.var = "n", fill = 0) %>%
comparison.cloud(colors = c("gray20", "gray80"),
max.words = 100)
p_and_p_sentences <- tibble(text = prideprejudice) %>%
unnest_tokens(sentence, text, token = "sentences")
p_and_p_sentences <- tibble(text = prideprejudice) %>%
unnest_tokens(sentence, text, token = "sentences")
p_and_p_sentences$sentence[2]
austen_chapters <- austen_books() %>%
group_by(book) %>%
unnest_tokens(chapter, text, token = "regex",
pattern = "Chapter|CHAPTER [\\dIVXLC]") %>%
ungroup()
austen_chapters %>%
group_by(book) %>%
summarise(chapters = n())
bingnegative <- get_sentiments("bing") %>%
filter(sentiment == "negative")
wordcounts <- tidy_books %>%
group_by(book, chapter) %>%
summarize(words = n())
tidy_books %>%
semi_join(bingnegative) %>%
group_by(book, chapter) %>%
summarize(negativewords = n()) %>%
left_join(wordcounts, by = c("book", "chapter")) %>%
mutate(ratio = negativewords/words) %>%
filter(chapter != 0) %>%
slice_max(ratio, n = 1) %>%
ungroup()
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
devtools::install_github("bradleyboehmke/harrypotter")
if (packageVersion("devtools") < 1.6) {
install.packages("devtools")
}
devtools::install_github("bradleyboehmke/harrypotter")
library(harrypotter)
hallows <- deathly_hallows
hallows
hallows <- deathly_hallows
hallows %>% unnest_tokens(word,text)
hallows <- deathly_hallows
hallows_table <- tibble(chapter=seq_along(hallows), text = hallows )
hallows_table
hallows <- deathly_hallows
hallows_table <- tibble(chapter=seq_along(hallows), text = hallows )
hallows_table %>% unnest_tokens(word,text)
hallows_table
hallows <- deathly_hallows
hallows_table <- as.data.frame(tibble(chapter=seq_along(hallows), text = hallows ) )
hallows_table %>% unnest_tokens(word,text)
hallows_table
hallows <- deathly_hallows
hallows_table <- as.data.frame(tibble(chapter=seq_along(hallows), text = hallows ) ) %>% unnest_tokens(word,text)
hallows_table
hallows <- deathly_hallows
hallows_table <- tibble(chapter=seq_along(hallows), text = hallows )  %>% unnest_tokens(word,text)
hallows_table
hallows <- deathly_hallows
hallows_table <- tibble(chapter=seq_along(hallows), text = hallows )
hallows_table
hallows <- deathly_hallows
hallows_table <- tibble(chapter=seq_along(hallows), text = hallows )  %>% unnest_tokens(sentence,text, token="sentences")
hallows_table
library(sentiment.ai)
install.packages("sentiment.ai")
library(sentiment.ai)
library(sentiment.ai)
init_sentiment.ai()
library(sentiment.ai)
sentiment.ai.install()
require(sentiment.ai)
sentiment.ai.install()
library(sentiment.ai)
sentiment.ai::install_sentiment.ai()
init_sentiment.ai()
